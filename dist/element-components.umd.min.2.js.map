{"version":3,"sources":["webpack://element-components/./packages/vendor/Export2Excel.js"],"names":["generateArray","table","out","rows","ranges","R","outRow","row","columns","C","cell","colspan","rowspan","cellValue","range","i","s","r","c","length","e","k","datenum","v","date1904","epoch","Date","sheet_from_array_of_arrays","data","opts","ws","cell_ref","XLSX","Workbook","this","s2ab","buf","ArrayBuffer","view","Uint8Array","export_table_to_excel","id","theTable","document","oo","ws_name","wb","wbout","bookType","bookSST","type","saveAs","Blob","export_json_to_excel","multiHeader","header","filename","merges","autoWidth","item","colWidth","val","result","j"],"mappings":"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","file":"element-components.umd.min.2.js","sourcesContent":["/* eslint-disable */\r\nimport { saveAs } from 'file-saver'\r\nimport XLSX from 'xlsx'\r\n\r\nfunction generateArray(table) {\r\n  var out = [];\r\n  var rows = table.querySelectorAll('tr');\r\n  var ranges = [];\r\n  for (var R = 0; R < rows.length; ++R) {\r\n    var outRow = [];\r\n    var row = rows[R];\r\n    var columns = row.querySelectorAll('td');\r\n    for (var C = 0; C < columns.length; ++C) {\r\n      var cell = columns[C];\r\n      var colspan = cell.getAttribute('colspan');\r\n      var rowspan = cell.getAttribute('rowspan');\r\n      var cellValue = cell.innerText;\r\n      if (cellValue !== \"\" && cellValue == +cellValue) cellValue = +cellValue;\r\n\r\n      //Skip ranges\r\n      ranges.forEach(function (range) {\r\n        if (R >= range.s.r && R <= range.e.r && outRow.length >= range.s.c && outRow.length <= range.e.c) {\r\n          for (var i = 0; i <= range.e.c - range.s.c; ++i) outRow.push(null);\r\n        }\r\n      });\r\n\r\n      //Handle Row Span\r\n      if (rowspan || colspan) {\r\n        rowspan = rowspan || 1;\r\n        colspan = colspan || 1;\r\n        ranges.push({\r\n          s: {\r\n            r: R,\r\n            c: outRow.length\r\n          },\r\n          e: {\r\n            r: R + rowspan - 1,\r\n            c: outRow.length + colspan - 1\r\n          }\r\n        });\r\n      };\r\n\r\n      //Handle Value\r\n      outRow.push(cellValue !== \"\" ? cellValue : null);\r\n\r\n      //Handle Colspan\r\n      if (colspan)\r\n        for (var k = 0; k < colspan - 1; ++k) outRow.push(null);\r\n    }\r\n    out.push(outRow);\r\n  }\r\n  return [out, ranges];\r\n};\r\n\r\nfunction datenum(v, date1904) {\r\n  if (date1904) v += 1462;\r\n  var epoch = Date.parse(v);\r\n  return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\r\n}\r\n\r\nfunction sheet_from_array_of_arrays(data, opts) {\r\n  var ws = {};\r\n  var range = {\r\n    s: {\r\n      c: 10000000,\r\n      r: 10000000\r\n    },\r\n    e: {\r\n      c: 0,\r\n      r: 0\r\n    }\r\n  };\r\n  for (var R = 0; R != data.length; ++R) {\r\n    for (var C = 0; C != data[R].length; ++C) {\r\n      if (range.s.r > R) range.s.r = R;\r\n      if (range.s.c > C) range.s.c = C;\r\n      if (range.e.r < R) range.e.r = R;\r\n      if (range.e.c < C) range.e.c = C;\r\n      var cell = {\r\n        v: data[R][C]\r\n      };\r\n      if (cell.v == null) continue;\r\n      var cell_ref = XLSX.utils.encode_cell({\r\n        c: C,\r\n        r: R\r\n      });\r\n\r\n      if (typeof cell.v === 'number') cell.t = 'n';\r\n      else if (typeof cell.v === 'boolean') cell.t = 'b';\r\n      else if (cell.v instanceof Date) {\r\n        cell.t = 'n';\r\n        cell.z = XLSX.SSF._table[14];\r\n        cell.v = datenum(cell.v);\r\n      } else cell.t = 's';\r\n\r\n      ws[cell_ref] = cell;\r\n    }\r\n  }\r\n  if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);\r\n  return ws;\r\n}\r\n\r\nfunction Workbook() {\r\n  if (!(this instanceof Workbook)) return new Workbook();\r\n  this.SheetNames = [];\r\n  this.Sheets = {};\r\n}\r\n\r\nfunction s2ab(s) {\r\n  var buf = new ArrayBuffer(s.length);\r\n  var view = new Uint8Array(buf);\r\n  for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\r\n  return buf;\r\n}\r\n\r\nexport function export_table_to_excel(id) {\r\n  var theTable = document.getElementById(id);\r\n  var oo = generateArray(theTable);\r\n  var ranges = oo[1];\r\n\r\n  /* original data */\r\n  var data = oo[0];\r\n  var ws_name = \"SheetJS\";\r\n\r\n  var wb = new Workbook(),\r\n    ws = sheet_from_array_of_arrays(data);\r\n\r\n  /* add ranges to worksheet */\r\n  // ws['!cols'] = ['apple', 'banan'];\r\n  ws['!merges'] = ranges;\r\n\r\n  /* add worksheet to workbook */\r\n  wb.SheetNames.push(ws_name);\r\n  wb.Sheets[ws_name] = ws;\r\n\r\n  var wbout = XLSX.write(wb, {\r\n    bookType: 'xlsx',\r\n    bookSST: false,\r\n    type: 'binary'\r\n  });\r\n\r\n  saveAs(new Blob([s2ab(wbout)], {\r\n    type: \"application/octet-stream\"\r\n  }), \"test.xlsx\")\r\n}\r\n\r\nexport function export_json_to_excel({\r\n  multiHeader = [],\r\n  header,\r\n  data,\r\n  filename,\r\n  merges = [],\r\n  autoWidth = true,\r\n  bookType = 'xlsx'\r\n} = {}) {\r\n  /* original data */\r\n  filename = filename || 'excel-list'\r\n  data = [...data]\r\n  data.unshift(header);\r\n\r\n  for (let i = multiHeader.length - 1; i > -1; i--) {\r\n    data.unshift(multiHeader[i])\r\n  }\r\n\r\n  var ws_name = \"SheetJS\";\r\n  var wb = new Workbook(),\r\n    ws = sheet_from_array_of_arrays(data);\r\n\r\n  if (merges.length > 0) {\r\n    if (!ws['!merges']) ws['!merges'] = [];\r\n    merges.forEach(item => {\r\n      ws['!merges'].push(XLSX.utils.decode_range(item))\r\n    })\r\n  }\r\n\r\n  if (autoWidth) {\r\n    /*设置worksheet每列的最大宽度*/\r\n    const colWidth = data.map(row => row.map(val => {\r\n      /*先判断是否为null/undefined*/\r\n      if (val == null) {\r\n        return {\r\n          'wch': 10\r\n        };\r\n      }\r\n      /*再判断是否为中文*/\r\n      else if (val.toString().charCodeAt(0) > 255) {\r\n        return {\r\n          'wch': val.toString().length * 2\r\n        };\r\n      } else {\r\n        return {\r\n          'wch': val.toString().length\r\n        };\r\n      }\r\n    }))\r\n    /*以第一行为初始值*/\r\n    let result = colWidth[0];\r\n    for (let i = 1; i < colWidth.length; i++) {\r\n      for (let j = 0; j < colWidth[i].length; j++) {\r\n        if (result[j]['wch'] < colWidth[i][j]['wch']) {\r\n          result[j]['wch'] = colWidth[i][j]['wch'];\r\n        }\r\n      }\r\n    }\r\n    ws['!cols'] = result;\r\n  }\r\n\r\n  /* add worksheet to workbook */\r\n  wb.SheetNames.push(ws_name);\r\n  wb.Sheets[ws_name] = ws;\r\n\r\n  var wbout = XLSX.write(wb, {\r\n    bookType: bookType,\r\n    bookSST: false,\r\n    type: 'binary'\r\n  });\r\n  saveAs(new Blob([s2ab(wbout)], {\r\n    type: \"application/octet-stream\"\r\n  }), `${filename}.${bookType}`);\r\n}\r\n"],"sourceRoot":""}